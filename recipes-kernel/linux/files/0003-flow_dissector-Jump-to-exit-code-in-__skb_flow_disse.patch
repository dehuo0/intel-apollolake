From 17150732af9343debebb3ee3abf94e77ef2d428b Mon Sep 17 00:00:00 2001
From: Tom Herbert <tom@herbertland.com>
Date: Tue, 1 Sep 2015 09:24:26 -0700
Subject: [PATCH 3/4] flow_dissector: Jump to exit code in __skb_flow_dissect

commit a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0 upstream

Instead of returning immediately (on a parsing failure for instance) we
jump to cleanup code. This always sets protocol values in key_control
(even on a failure there is still valid information in the key_tags that
was set before the problem was hit).

Signed-off-by: Tom Herbert <tom@herbertland.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Zhang Xiao <xiao.zhang@windriver.com>
---
 net/core/flow_dissector.c | 41 ++++++++++++++++++++---------------------
 1 file changed, 20 insertions(+), 21 deletions(-)

diff --git a/net/core/flow_dissector.c b/net/core/flow_dissector.c
index 3556791fdc6e..a24fa52e939f 100644
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@ -75,6 +75,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb, struct flow_keys *flow,
 			void *data, __be16 proto, int nhoff, int hlen)
 {
 	u8 ip_proto;
+	bool ret = false;
 
 	if (!data) {
 		data = skb->data;
@@ -93,7 +94,7 @@ again:
 ip:
 		iph = __skb_header_pointer(skb, nhoff, sizeof(_iph), data, hlen, &_iph);
 		if (!iph || iph->ihl < 5)
-			return false;
+			goto out_bad;
 		nhoff += iph->ihl * 4;
 
 		ip_proto = iph->protocol;
@@ -117,7 +118,7 @@ ip:
 ipv6:
 		iph = __skb_header_pointer(skb, nhoff, sizeof(_iph), data, hlen, &_iph);
 		if (!iph)
-			return false;
+			goto out_bad;
 
 		ip_proto = iph->nexthdr;
 		nhoff += sizeof(struct ipv6hdr);
@@ -136,12 +137,9 @@ ipv6:
 			 * use that to represent the ports without any
 			 * further dissection.
 			 */
-			flow->n_proto = proto;
-			flow->ip_proto = ip_proto;
 			flow->ports = flow_label;
-			flow->thoff = (u16)nhoff;
 
-			return true;
+			goto out_good;
 		}
 
 		break;
@@ -153,7 +151,7 @@ ipv6:
 
 		vlan = __skb_header_pointer(skb, nhoff, sizeof(_vlan), data, hlen, &_vlan);
 		if (!vlan)
-			return false;
+			goto out_bad;
 
 		proto = vlan->h_vlan_encapsulated_proto;
 		nhoff += sizeof(*vlan);
@@ -166,7 +164,7 @@ ipv6:
 		} *hdr, _hdr;
 		hdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);
 		if (!hdr)
-			return false;
+			goto out_bad;
 		proto = hdr->proto;
 		nhoff += PPPOE_SES_HLEN;
 		switch (proto) {
@@ -175,7 +173,7 @@ ipv6:
 		case htons(PPP_IPV6):
 			goto ipv6;
 		default:
-			return false;
+			goto out_bad;
 		}
 	}
 	case htons(ETH_P_TIPC): {
@@ -185,18 +183,16 @@ ipv6:
 		} *hdr, _hdr;
 		hdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);
 		if (!hdr)
-			return false;
+			goto out_bad;
 		flow->src = hdr->srcnode;
 		flow->dst = 0;
-		flow->n_proto = proto;
-		flow->thoff = (u16)nhoff;
-		return true;
+		goto out_good;
 	}
 	case htons(ETH_P_FCOE):
 		flow->thoff = (u16)(nhoff + FCOE_HEADER_LEN);
 		/* fall through */
 	default:
-		return false;
+		goto out_bad;
 	}
 
 	switch (ip_proto) {
@@ -208,7 +204,7 @@ ipv6:
 
 		hdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);
 		if (!hdr)
-			return false;
+			goto out_bad;
 		/*
 		 * Only look inside GRE if version zero and no
 		 * routing
@@ -230,7 +226,7 @@ ipv6:
 							   sizeof(_eth),
 							   data, hlen, &_eth);
 				if (!eth)
-					return false;
+					goto out_bad;
 				proto = eth->h_proto;
 				nhoff += sizeof(*eth);
 
@@ -255,16 +251,19 @@ ipv6:
 		break;
 	}
 
-	flow->n_proto = proto;
-	flow->ip_proto = ip_proto;
-	flow->thoff = (u16) nhoff;
-
 	/* unless skb is set we don't need to record port info */
 	if (skb)
 		flow->ports = __skb_flow_get_ports(skb, nhoff, ip_proto,
 						   data, hlen);
+out_good:
+	ret = true;
+
+out_bad:
+	flow->n_proto = proto;
+	flow->ip_proto = ip_proto;
+	flow->thoff = (u16) nhoff;
 
-	return true;
+	return ret;
 }
 EXPORT_SYMBOL(__skb_flow_dissect);
 
-- 
2.11.0

